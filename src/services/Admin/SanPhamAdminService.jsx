import axios from 'axios';

const API_URL = 'http://localhost:8080/api/admin-san-pham';

const axiosInstance = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// L·∫•y token t·ª´ localStorage
const getToken = () => {
  const token = localStorage.getItem('adminToken');
  if (!token) {
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token trong localStorage');
  }
  return token;
};

// Interceptor: t·ª± ƒë·ªông g·∫Øn token n·∫øu c√≥
axiosInstance.interceptors.request.use(
  (config) => {
    const token = getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Interceptor: x·ª≠ l√Ω l·ªói 401
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      console.error('üö´ Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// ================= API =================

// L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
export const getAllSP = async (page = 0, size = 10) => {
  const response = await axiosInstance.get('/all', { params: { page, size } });
  return response.data;
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông
export const getActiveSP = async (page = 0, size = 10) => {
  const response = await axiosInstance.get('/active', { params: { page, size } });
  return response.data;
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ xo√°
export const getDeletedSP = async (page = 0, size = 10) => {
  const response = await axiosInstance.get('/deleted', { params: { page, size } });
  return response.data;
};

// T√¨m ki·∫øm s·∫£n ph·∫©m (k√®m s·ªë l∆∞·ª£ng)
export const searchSPWithQuantity = async (search = '', page = 0, size = 10) => {
  const response = await axiosInstance.get('/search', { params: { search, page, size } });
  return response.data;
};

// L·∫•y m·ªôt s·∫£n ph·∫©m theo ID
export const getOneSP = async (id) => {
  if (!id || isNaN(id)) throw new Error('ID kh√¥ng h·ª£p l·ªá');
  const response = await axiosInstance.get(`/${id}`);
  return response.data;
};

// Th√™m s·∫£n ph·∫©m m·ªõi
export const addSP = async (sanPham) => {
  if (!sanPham || typeof sanPham !== 'object' || !sanPham.ten?.trim()) {
    throw new Error('D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
  }
  const response = await axiosInstance.post('', sanPham);
  if (!response.data?.id) throw new Error('Ph·∫£n h·ªìi t·ª´ server kh√¥ng ch·ª©a ID s·∫£n ph·∫©m');
  return response.data;
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
export const updateSP = async (id, sanPham) => {
  if (!id || isNaN(id) || !sanPham || typeof sanPham !== 'object') {
    throw new Error('ID ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá');
  }
  const response = await axiosInstance.put(`/${id}`, sanPham);
  return response.data;
};

// Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i (·∫©n/hi·ªán)
export const toggleStatusSP = async (id) => {
  if (!id || isNaN(id)) throw new Error('ID kh√¥ng h·ª£p l·ªá');
  const response = await axiosInstance.put(`/toggle-status/${id}`);
  return response.data;
};

// X√≥a s·∫£n ph·∫©m (th·∫≠t ra l√† c·∫≠p nh·∫≠t tr·∫°ng th√°i)
export const deleteSP = async (id) => {
  if (!id || isNaN(id)) throw new Error('ID kh√¥ng h·ª£p l·ªá');
  const response = await axiosInstance.put(`/${id}`);
  return response.data;
};

export default axiosInstance;
